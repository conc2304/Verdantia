using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BuildingProperties : MonoBehaviour
{

    public int buildingIndex = -1;

    public GameObject environment;

    public bool connectToRoad;
    public PathTarget[] carsPathTargetsToConnect;
    public Transform[] carsPathTargetsToSpawn;
    public PathTarget[] citizensPathTargetsToConnect;
    public Transform[] citizensPathTargetsToSpawn;

    public Transform[] additionalSpace;

    public BuildConstruction buildConstruction;
    public float buildingHigh = 1;
    public float buildingTime = 10;

    public int spaceWidth = 1;


    // Simulation Driven/Driving Stats
    // General Building Properties
    public string buildingType; // e.g., Residential, Commercial, Industrial
    public int size; // Number of grid cells occupied
    public int constructionCost;
    public int operationalCost;
    public int taxRevenue;
    public string zoneRequirement; // e.g., Residential, Industrial, etc.
    public int upkeep;

    // Resource Management Properties
    public int energyConsumption;
    public int waterConsumption;
    public int wasteProduction;
    public int resourceProduction; // If applicable, for resource-producing buildings

    // Population Dynamics Properties
    public int capacity; // Number of people that can live or work in this building
    public int jobsProvided; // Number of jobs provided by commercial/industrial buildings
    public int happinessImpact; // Positive or negative impact on population happiness
    public int healthImpact; // Effect on population health
    public int educationImpact; // Effect on education levels

    // Environmental Impact Properties
    public int pollutionOutput; // How much pollution this building generates
    public int pollutionReduction; // How much this building reduces pollution (for parks, etc.)
    public int heatContribution; // Contribution to urban heat island effect
    public int greenSpaceEffect; // Benefits of green space
    public int carbonFootprint; // Carbon emissions of this building

    // Economic Properties
    public int taxContribution; // Amount of tax generated by this building
    public int jobCreation; // Number of jobs created by this building
    // public int industryBoost; // Boost for related industries

    // Disaster Impact and Resilience Properties
    // public int disasterVulnerability; // Vulnerability to natural disasters
    // public int resilienceRating; // Resilience rating to disasters (e.g., earthquake-proof)

    // Public Service Coverage and Radius (For Hospitals, Schools, etc.)
    public float coverageRadius; // The effective radius of this building's service
    public int serviceCapacity; // Maximum people that can be served


    void Start()
    {
        if (gameObject.CompareTag("Building"))
        {
            BuildingProperties buildingProps = GetComponent<BuildingProperties>();
            Transform[] additionalSpace = buildingProps.additionalSpace;
            // Make all "Additional Spaces" inherit heat properties from the Building Parent
            if (additionalSpace != null && additionalSpace.Length > 0)
            {
                // Loop through each Transform in the additionalSpace array
                for (int i = 0; i < additionalSpace.Length; i++)
                {
                    Transform space = additionalSpace[i];

                    if (space != null && space.CompareTag("Space") && space.TryGetComponent<BuildingProperties>(out BuildingProperties buildingProperties)) // Ensure the Transform is not null
                    {
                        buildingProperties.heatContribution = heatContribution;
                    }
                }
            }
        }
    }

    // Simulate the building's effects on the city stats
    public void ApplyBuildingEffects()
    {
        // Example of applying building's effects to city statistics (can be linked to actual city stats)
        Debug.Log(buildingType + " is applying its effects on the city.");
        // Logic for applying effects to city stats based on the building's properties.
    }

    // Update building properties (can be used in game or editor)
    public void UpdateBuildingStats()
    {
        // This method can include any logic to update building's properties dynamically
        Debug.Log(buildingType + " properties updated!");
    }


}


